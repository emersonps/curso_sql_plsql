SELECT Count(*) AS QTDE_REGISTROS,
	Avg(TOTAL) AS MEDIA,
	Round(Avg(TOTAL)) AS MEDIA,
	Max(TOTAL) AS MAXIMO,
	Min(TOTAL) AS MINIMO,
	Sum(TOTAL) AS SOMA,
	Max(DATA) AS DATA_MAIOR,
	Min(DATA) AS DATA_MENOR
FROM TCONTRATO;

--Próximo código sequencial tabela
SELECT Max(COD_CONTRATO) AS PROXIMO_CODIGO
FROM TCONTRATO;

SELECT Max(COD_CONTRATO) + 1 AS PROXIMO_CODIGO
FROM TCONTRATO;

SELECT * FROM TCONTRATO;

--TOTAL DE CONTRATOA POR ALUNO
SELECT COD_ALUNO, --COLUNAS COM FUNÇÃO DE GRUPO DA TABELA COM COLUNAS SEM FUNÇÃO DE GRUPO, PRECISA ESPECIFICAR O GRUPO BY COM A COLUNA SEM FUNÇÃO NO GROUP BY
  Count(*) AS QTDE_CONTRATO,
  Sum(TOTAL) AS VALOR_TOTAL
FROM TCONTRATO
GROUP BY COD_ALUNO;


SELECT * FROM TCONTRATO;

--REVISÃO
SELECT To_Char(Trunc(SYSDATE), 'DD/MM/YYYY') AS DATA FROM DUAL;
--Trunc - TIRA A HORA
--To_Char - COLOCA A DATA NO FORMATO QUE QUEREMOS DD/MM/YYYY

--TOTAL DE CONTRATO POR DATA
SELECT To_Char(Trunc(DATA), 'DD/MM/YYYY') AS DATA,
       Sum(TOTAL) AS SOMA, --soma do total vendido
       Avg(TOTAL) AS MEDIA, --media do total vendido
       Count(*) AS QTDE  --quantidade do total vendido
FROM TCONTRATO
GROUP BY Trunc(DATA) --Trunc pra ordernar por data e não por hora
ORDER BY DATA DESC;


SELECT * FROM TCONTRATO;

--02/06/2018 - CONTINUAÇÃO
UPDATE TCONTRATO SET
  DESCONTO = NULL
WHERE COD_CONTRATO = 4;

UPDATE TCONTRATO SET
  DESCONTO = NULL
WHERE COD_CONTRATO = 3;

SELECT Count(*) AS QTDE_REGISTROS
FROM TCONTRATO;

--COUNT -> IGNORA NULOS
SELECT Count(DESCONTO)
FROM TCONTRATO;

--QTDE DE REGISTROS COM ESTADO INFORMADO
SELECT Count(ESTADO) FROM TALUNO;

--QTDE DE ESTADOS DIFERENTES
SELECT Count(DISTINCT(ESTADO)) FROM TALUNO;

--QDTE DE REGISTROS POR ESTADO
SELECT ESTADO, Count(*)
FROM TALUNO
GROUP BY ESTADO;

--SOMA, MEDIA, QUANTIDADE E MEDIA COM NULOS DE DESCONTO
SELECT Sum(DESCONTO) AS SOMA,
       Avg(DESCONTO) AS MEDIA,  --SOMA E DIVIDE PELA QUANTIDADE DE REGISTROS SEM OS NULOS
       Count(DESCONTO) AS QUANTIDADE,
       Round(Avg(Nvl(DESCONTO,0)),2) AS MEDIA_ARREDOND --SOMA E DIVIDE PELA QUANTIDADE DE REGISTROS COMOS NULOS
FROM TCONTRATO;

--TOTAL DE CONTRATO POR ESTADO E DATA
SELECT ALU.ESTADO, Trunc(CON.DATA) AS DATA,
       Sum(CON.TOTAL) TOTAL, Count(*) QTDE

FROM TALUNO ALU, TCONTRATO CON
WHERE ALU.COD_ALUNO = CON.COD_ALUNO  --UNIÃO
GROUP BY ALU.ESTADO, Trunc(CON.DATA)
ORDER BY ALU.ESTADO, DATA DESC;

--TOTAL DE CONTRATO POR ESTADO
SELECT ALU.ESTADO,
       Sum(CON.TOTAL) TOTAL, Count(*) QTDE

FROM TALUNO ALU, TCONTRATO CON
WHERE ALU.COD_ALUNO = CON.COD_ALUNO  --UNIÃO
GROUP BY ALU.ESTADO
ORDER BY ALU.ESTADO;

--Having - filtrar coluna com função de grupo
--Having é uma cláusula tipo where usado para função de grupos
SELECT COD_ALUNO, Round(Avg(TOTAL)) MEDIA
FROM TCONTRATO
WHERE COD_ALUNO > 0
HAVING Avg(TOTAL) > 500 --PODE SER USADO ANTES DO GROUP BY
GROUP BY COD_ALUNO
ORDER BY COD_ALUNO;

--
SELECT COD_ALUNO, Round(Avg(TOTAL)) MEDIA
FROM TCONTRATO
WHERE COD_ALUNO > 0
GROUP BY COD_ALUNO
HAVING Avg(TOTAL) > 500 --PODE SER USADO DEPOIS DO GROUP BY
ORDER BY COD_ALUNO;

--MEDIA MAIS ALTA POR ALUNO
SELECT Max(Avg(TOTAL))
FROM TCONTRATO
GROUP BY COD_ALUNO;

--SOMA DOS SALARIOS POR ESTADO
SELECT ESTADO, Sum(SALARIO) AS TOTAL
FROM TALUNO
GROUP BY ESTADO
ORDER BY TOTAL  DESC;






SELECT * FROM TALUNO;
SELECT * FROM TCONTRATO;

UPDATE TALUNO SET ESTADO = 'AM'
WHERE
  COD_ALUNO = 4 OR
  COD_ALUNO = 5 OR
  COD_ALUNO = 6 OR
  COD_ALUNO = 8 OR
  COD_ALUNO = 9;

UPDATE TALUNO SET SALARIO = 500
WHERE
  COD_ALUNO = 1 OR
  COD_ALUNO = 3 OR
  COD_ALUNO = 5 OR
  COD_ALUNO = 7;

UPDATE TALUNO SET SALARIO = 950
WHERE
  COD_ALUNO = 2 OR
  COD_ALUNO = 4 OR
  COD_ALUNO = 6 OR
  COD_ALUNO = 8;

UPDATE TALUNO SET SALARIO = 1500
WHERE
  COD_ALUNO = 9 OR
  COD_ALUNO = 10;


UPDATE TALUNO SET ESTADO = 'RS'
WHERE COD_ALUNO = 10;

UPDATE TALUNO SET COD_ALUNO = 20
WHERE COD_ALUNO = 1;

UPDATE TALUNO SET COD_ALUNO = 1
WHERE COD_ALUNO = 20;

UPDATE TALUNO SET ESTADO = 'ES'
WHERE COD_ALUNO = 2;

UPDATE TALUNO SET ESTADO = 'AC'
WHERE COD_ALUNO = 7;

UPDATE TALUNO SET ESTADO = 'RS'
WHERE COD_ALUNO = 3;

SELECT * FROM TALUNO;

COMMIT;